using java.lang;
using MVCTest.Models;
using Newtonsoft.Json;
using RazorEngine;
using RestSharp;
using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Security.Cryptography;
using System.Web;
using System.Web.Mvc;

namespace MVCSample.Controllers
{
    public class CRMFormsController : Controller
    {
        //https://stackoverflow.com/questions/19743718/how-to-create-dynamic-radio-buttons-in-mvc-razor  
        //http://www.tutorialsteacher.com/mvc/htmlhelper-radiobutton-radiobuttonfor  
        //http://www.c-sharpcorner.com/UploadFile/4d9083/binding-radiobutton-and-radiobuttonlist-in-various-way-in-mv201/ 
        // GET: CRMForms
        public ActionResult Index(int group = 1, int steps = 4) // dont include confirm step (last step)
        {
            CRMModel model = new CRMModel();
            model.ControlFieldList = model.ControlFieldList.Where(c => c.Group == group).ToList();
            model.CurrentGroup = group;
            model.Steps = steps;
            return View(model);
        }

        [HttpPost]
        public ActionResult Index(CRMModel model)
        {
            if (model != null)
            {
                if (model.ControlFieldList != null && model.ControlFieldList.Any())
                {
                    var element = new JsonObject();
                    element.Add("projectname", "{store_name}");
                    foreach (var control in model.ControlFieldList)
                    {
                        switch (control.Type)
                        {
                            case ControlType.Textbox:
                            case ControlType.Textarea:
                            case ControlType.Dropdown:
                                if (!string.IsNullOrEmpty(control.FieldValue))
                                    element.Add(control.CRMField, control.FieldValue);
                                break;
                            case ControlType.Checkbox:
                                List<string> itemList = new List<string>();
                                foreach (var item in control.ControlOptionList)
                                {
                                    if (item.OptionValue)
                                    {
                                        itemList.Add(item.Label);
                                    }
                                }
                                if (itemList.Any())
                                {
                                    element.Add(control.CRMField, JsonConvert.SerializeObject(itemList));
                                }
                                break;
                            case ControlType.Radio:
                                List<string> optionList = new List<string>();
                                if (!string.IsNullOrEmpty(control.FieldValue))
                                {
                                    optionList.Add(control.FieldValue);
                                }
                                if (optionList.Any())
                                {
                                    element.Add(control.CRMField, JsonConvert.SerializeObject(optionList));
                                }
                                break;

                        }
                    }
                }
            }



            //string VtigerCrmApiUrl = "http://crm.shopfast.com/webservice.php/";
            //string CrmUsername = "Bhavik";
            //string accessKey = "OegHQRq5X1gPoqHs";
            //if (!string.IsNullOrEmpty(VtigerCrmApiUrl) && !string.IsNullOrEmpty(CrmUsername) && !string.IsNullOrEmpty(accessKey))
            //{
            //    // Get Token
            //    using (var client = new HttpClient())
            //    {
            //        client.BaseAddress = new Uri(VtigerCrmApiUrl);
            //        client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
            //        var tokenResponse = client.GetAsync("?operation=getchallenge&username=" + CrmUsername).Result;
            //        if (tokenResponse.IsSuccessStatusCode)
            //        {
            //            var tokenResult = tokenResponse.Content.ReadAsAsync<VtigerCrmResponse>().Result;
            //            if (tokenResult.success)
            //            {
            //                using (var webclient = new WebClient())
            //                {
            //                    webclient.UseDefaultCredentials = true;
            //                    webclient.Headers.Add("Content-Type:application/x-www-form-urlencoded");
            //                    webclient.Headers.Add("Accept:application/json");
            //                    var uri = new Uri(VtigerCrmApiUrl);

            //                    NameValueCollection loginParams = new NameValueCollection();
            //                    loginParams.Add("operation", "login");
            //                    loginParams.Add("username", CrmUsername);
            //                    loginParams.Add("accessKey", CalculateMD5Hash(tokenResult.result.token + accessKey));
            //                    var response = webclient.UploadValues(uri, "POST", loginParams);
            //                    string jsonResponse = string.Empty;
            //                    jsonResponse = System.Text.Encoding.ASCII.GetString(response);
            //                    var loginResult = JsonConvert.DeserializeObject<VtigerCrmResponse>(jsonResponse);
            //                    if (loginResult.success)
            //                    {
            //                        // // Create Leads entry                                
            //                        var element = new JsonObject();
            //                        element.Add("projectname", "today123");
            //                        element.Add("cf_1092", "test textbox");
            //                        element.Add("cf_1094[]","item2");
            //                        element.Add("assigned_user_id", loginResult.result.userId);                               

            //                        NameValueCollection leadParams = new NameValueCollection();
            //                        leadParams.Add("operation", "create");
            //                        leadParams.Add("sessionName", loginResult.result.sessionName);
            //                        leadParams.Add("elementType", "Project");
            //                        leadParams.Add("element", element.ToString());
            //                        var responseLead = webclient.UploadValues(uri, "POST", leadParams);
            //                        jsonResponse = System.Text.Encoding.ASCII.GetString(responseLead);
            //                        var leadResult = JsonConvert.DeserializeObject<VtigerCrmResponse>(jsonResponse);
            //                    }
            //                }
            //            }
            //        }
            //    }
            //}


            return View(model);
        }

        private string CalculateMD5Hash(string input)
        {
            // step 1, calculate MD5 hash from input
            MD5 md5 = System.Security.Cryptography.MD5.Create();
            byte[] inputBytes = System.Text.Encoding.ASCII.GetBytes(input);
            byte[] hash = md5.ComputeHash(inputBytes);
            // step 2, convert byte array to hex string
            StringBuilder sb = new StringBuilder();
            for (int i = 0; i < hash.Length; i++)
            {
                sb.append(hash[i].ToString("X2"));
            }
            return sb.ToString().ToLower();
        }
    }
}
